// Code generated by Wire protocol buffer compiler, do not edit.
// Source: app.cash.trifle.api.alpha.MobileCertificateRequest in public.proto
import Foundation
import Wire

/**
 * The certificate request object generated by Trifle on mobile clients. This proto is used as a
 * serialization/deserialization mechanism for an otherwise opaque object whose representation is
 * internal to the library only. This primary purpose of this message is to convey the public key
 * portion of the key pair created on a client's device so that an authorization service may then
 * grant the client a certificate.
 */
public struct MobileCertificateRequest {

    /**
     * Version describing the current format of the MobileCertificateRequest.
     * Required.
     */
    public var version: UInt32?
    /**
     * Bytes representing a Certificate Request as specified in the PKCS10 RFC, see
     * https://datatracker.ietf.org/doc/html/rfc5967 for details.
     */
    public var pkcs10_request: Data?
    public var unknownFields: Data = .init()

    public init(version: UInt32? = nil, pkcs10_request: Data? = nil) {
        self.version = version
        self.pkcs10_request = pkcs10_request
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension MobileCertificateRequest : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension MobileCertificateRequest : Hashable {
}
#endif

#if swift(>=5.5)
extension MobileCertificateRequest : Sendable {
}
#endif

extension MobileCertificateRequest : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/app.cash.trifle.api.alpha.MobileCertificateRequest"
    }
}

extension MobileCertificateRequest : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        var version: UInt32? = nil
        var pkcs10_request: Data? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: version = try reader.decode(UInt32.self)
            case 2: pkcs10_request = try reader.decode(Data.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.version = version
        self.pkcs10_request = pkcs10_request
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.version)
        try writer.encode(tag: 2, value: self.pkcs10_request)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension MobileCertificateRequest : Codable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.version = try container.decodeIfPresent(UInt32.self, forKey: "version")
        self.pkcs10_request = try container.decodeIfPresent(stringEncoded: Data.self, firstOfKeys: "pkcs10Request", "pkcs10_request")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let preferCamelCase = encoder.protoKeyNameEncodingStrategy == .camelCase

        try container.encodeIfPresent(self.version, forKey: "version")
        try container.encodeIfPresent(stringEncoded: self.pkcs10_request, forKey: preferCamelCase ? "pkcs10Request" : "pkcs10_request")
    }
}
#endif
