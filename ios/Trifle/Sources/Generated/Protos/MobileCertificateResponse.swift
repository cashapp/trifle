// Code generated by Wire protocol buffer compiler, do not edit.
// Source: app.cash.trifle.api.alpha.MobileCertificateResponse in public.proto
import Foundation
import Wire

public struct MobileCertificateResponse {

    public var certificates: [Foundation.Data] = []
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension MobileCertificateResponse : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension MobileCertificateResponse : Hashable {
}
#endif

extension MobileCertificateResponse : Sendable {
}

extension MobileCertificateResponse : ProtoDefaultedValue {

    public static var defaultedValue: Self {
        .init()
    }
}

extension MobileCertificateResponse : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/app.cash.trifle.api.alpha.MobileCertificateResponse"
    }

}

extension MobileCertificateResponse : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var certificates: [Foundation.Data] = []

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: try protoReader.decode(into: &certificates)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self.certificates = certificates
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.certificates)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension MobileCertificateResponse : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.certificates = try container.decodeProtoArray(Foundation.Data.self, forKey: "certificates")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.certificates.isEmpty {
            try container.encodeProtoArray(self.certificates, forKey: "certificates")
        }
    }

}
#endif
