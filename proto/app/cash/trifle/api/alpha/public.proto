syntax = "proto2";
package app.cash.trifle.api.alpha;

option java_package = "app.cash.trifle.protos.api.alpha";

/**
 * The certificate request object generated by Trifle on mobile clients. This proto is used as a
 * serialization/deserialization mechanism for an otherwise opaque object whose representation is
 * internal to the library only. This primary purpose of this message is to convey the public key
 * portion of the key pair created on a client's device so that an authorization service may then
 * grant the client a certificate.
 */
message MobileCertificateRequest {
  // Version describing the current format of the MobileCertificateRequest.
  // Required.
  optional uint32 version = 1;

  // Bytes representing a Certificate Request as specified in the PKCS10 RFC, see
  // https://datatracker.ietf.org/doc/html/rfc5967 for details.
  optional bytes pkcs10_request = 2;
}

message MobileCertificateResponse {
  repeated bytes certificates = 1;
}

/**
 * The certificate object handled by Trifle. This proto is used as a serialization/deserialization
 * mechanism for an otherwise opaque object whose representation is internal to the library only.
 * The purpose of this message is to bind a public key with a set of verified attributes about the
 * entity which controls the private key corresponding to the given public key.
 */
message Certificate {
  // Version describing the current format of the underlying bytes of the certificate. This tells
  // the Trifle library how to interpret the certificate bytes.
  // Required.
  optional uint32 version = 1;

  // The current representation is fundamentally an x.509 certificate as defined in
  // https://datatracker.ietf.org/doc/html/rfc5280, with most of the fields and features ignored.
  optional bytes certificate = 2;
}

/**
 * The signed data object handled by Trifle. This proto is used as a serialization/deserialization
 * mechanism for an otherwise opaque object whose representation is internal to the library only.
 * The purpose of this message is to represent a signed message that contains the client encoded
 * data, certificate chain (includes the signing certificate), signature, and Trifle metadata.
 */
message SignedData {
  // Signing algorithms supported by Trifle
  enum Algorithm {
    DO_NOT_USE = 0;
    ECDSA_SHA256 = 1;
    ED25519 = 2;
  }

  // Datatype provided by the Trifle library associated with the signing of
  // the associated client data.
  message EnvelopedData{
    // Signing Format version associated with this payload. This is to enable
    // immediate verification without having to parse the signed data.
    // Verifier should verify that this matches the signed version to prevent
    // rollback attacks.
    optional uint32 version = 1;

    // Signing algorithm used to sign over the SigningMessage message.
    optional Algorithm signing_algorithm = 2;

    // Data provided directly by the Trifle library client.
    optional bytes data = 3;
  }

  // The data which has been signed. This should deserialize to a EnvelopedData
  // message after verification.
  optional bytes enveloped_data = 1;

  // The actual signature over the signed enveloped data, generated according to
  // the algorithm and private key with the associated certificate.
  optional bytes signature = 2;

  // The Trifle certificates that include the leaf, intermediate (if any), and root,
  // in the order described.
  //
  // Certificate chain is provided by signer so that the verifier can verify
  // with its root certificate.
  //
  // The leaf certificate embeds the verification (public) key. The certificate must
  // match the certificate of the signed data.
  repeated Certificate certificates = 3;
}
